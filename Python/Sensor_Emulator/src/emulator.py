### Import the relevant libraries for that script
import time
import logging
from logging.config import fileConfig
import paho.mqtt.client as paho
import time
import datetime
import configparser
import os
from influxdb import InfluxDBClient

import sensor as s

### Define the root directory path
ROOT_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..')

### Get the logging configuration file
fileConfig(os.path.join(ROOT_DIR, 'config', 'logging.ini'))

### Instantiate the logger object
logger = logging.getLogger()

### Get the 'setup.ini' file handler
config = configparser.ConfigParser()

### Load the file to the config handlers
config.read(os.path.join(ROOT_DIR, 'config', 'setup.ini'))

class emulator():
    '''
        This class will emulate sensors.
        The number of sensors is controlled by the variable 'numSensors'
        The frequency that this data will be generated is controlled be the variable 'frequency_in_seconds'
        There is also the possibility to run 'locally' (the data is printed on the terminal),
        or then publish to the MQTT broker. There is also the possibility of store this data into a local
        database that is used on the monitoring.
    '''

    def __init__(self, frequency_in_seconds, numSensors, local, store_db):
        '''
            Parameters:
                frequency_in_seconds:
                    Description: The frequency (in seconds) that the data will be generate
                    Type: int
                    Example: 5, 15, 60
                numSensors:
                    Description: The number of sensors that will be emulated
                    Type: int
                    Example: 1, 2, 4
                local:
                    Description: Flag that control if the code is running on 'local' mode (i.e., the data is printed
                        on the terminal instead of be publish to the MQTT Broker)
                    Type: boolean
                    Example: True / False
                store_db:
                    Description: Flag that control if the data generated is stored on the 'influxDB'
                    Type: boolean
                    Example: True / False
        '''

        ### Get the variable values to these local class variables
        self.frequency_in_seconds = int(frequency_in_seconds)
        self.numSensors = int(numSensors)
        self.local = local
        self.store_db = store_db

    def run(self):
        '''
            This method is responsable of:
            1. Instantiate the sensor objects
            2. Identify if is running 'local' or not
            3. Identify if the data generated will be save on the 'influxDB'
            4. Generate the sensors data
        '''

        try:

            logger.info('Emulator run triggered')

            ### instantiation of the sensors

            ### create the list that will 'host' the sensors objects
            listSensors = []
            
            ### loop that control the sensors instantiation process
            for i in range(0, self.numSensors):
                listSensors.append(s.sensor())

            ### if is not running local, create the client that connects to the MQTT broker
            if not self.local:

                ### get the MQTT broker address
                broker = config['mosquitto']['broker_address']
                
                ### get the MQTT broker port
                port = int(config['mosquitto']['broker_port'])
                
                ### get the MQTT topic name structure
                topic_structure = config['mosquitto']['topic_structure']
                
                ### Create the MQTT broker client
                mqtt_broker_client = paho.Client("sensor_Emulator")
                
                ### Connect to the MQTT broker
                mqtt_broker_client.connect(broker, port)

            ### control if the data generated by the sensors will be load to the local 'influxDB'
            if self.store_db:

                ### set InfluxDB database name
                db_name = 'sensor_data'
                
                ### Create the InfluxDB client
                client = InfluxDBClient('localhost', 8086, 'root', 'root', db_name)
                
                ### Drop the 'db_name' database, if exist (the idea is to always start with an empty DB)
                client.drop_database(db_name)

                ### Create the InfluxDB database, using the 'db_name' value as a name
                client.create_database(db_name)

            ### Generate the data and publish / print
            while True:
                
                ### Set the timestamp
                timestamp = datetime.datetime.fromtimestamp(time.time())

                ### This loop will, for each sensor:
                ### 1. generate the data
                ### 2. Create the message (that will be publish to the MQTT topic)
                ### 3. Publish the data
                ### 4. if 'store_db is True', load the data to the influxDB
                for i in range(0, self.numSensors):
                    
                    ### run the sensor method that generates the data
                    data = listSensors[i].generateData()

                    ### check if is running in 'local mode'
                    if self.local:
                        
                        ### Set/Create the message
                        message = "sensor_" + str(i + 1) + "|" + str(
                            timestamp.strftime('%Y-%m-%d|%H:%M:%S')) + "|" + str(data)

                        ### print the message on the terminal
                        print(message)

                    ### on the case that it is not running locally
                    else:
                        
                        ### Set/Create the message
                        message = str(
                            timestamp.strftime('%Y-%m-%d|%H:%M:%S')) + "|" + str(data)

                        ### create a topic
                        topic = topic_structure.replace("[SENSOR_ID]", str(i + 1))
                        
                        ### publish the data to the topic
                        mqtt_broker_client.publish(topic, message)

                        logger.info("topic|" + str(topic) + "|message|" + message)

                    ### on the case that the data will be load to 'influxDB'
                    if self.store_db:
                        
                        ### Set the name of the table
                        table_name = "sensor_data"

                        ### Specify the format of the date-time
                        date_format = '%Y-%m-%dT%H:%M:%S%Z'

                        ### Create the json structure to load to 'influxDB'
                        json_body = [
                            {
                                "measurement": table_name,
                                "time": str(timestamp.strftime(date_format) + "Z"),
                                "tags": {
                                    "sensorId": str(i + 1)
                                },
                                "fields": {
                                    "value": data
                                }
                            }
                        ]

                        ### Load the data to 'influxDB'
                        client.write_points(json_body)

                        logger.info("data inserted on db: " + db_name + "table: " + table_name)
                        logger.info("data inserted:" + str(json_body))

                ### It is here that the time is controled (the frequency that the data is generated)
                time.sleep(self.frequency_in_seconds)

        except Exception as e:
            logger.exception(e)


